/// <reference types="chrome" />

declare type CloseWarningEvent = {
    type: "inactive" | "absolute";
    deadline: Deadline | undefined;
};

declare type ConnectionStateEvent = {
    state: "connecting" | "playing" | "reconnecting";
};

declare type Deadline = {
    delay: number;
    closeDate: string;
};

declare type DisconnectEvent = {
    type: DisconnectReason;
};

declare type DisconnectReason = "request" | "inactive" | "absolute" | "kicked";

/**
 * Error thrown when request to load the Hyperbeam session fails
 *
 * @category error
 */
export declare class FailedToLoadError extends Error {
    constructor(message: string);
}

export declare function getRegionInfo(): Promise<HyperbeamRegionInfo>;

/**
 * Hyperbeam web client constructor
 *
 * ```ts
 * import Hyperbeam from "@hyperbeam/web"
 *
 * const hb = await Hyperbeam(
 *   document.getElementById("container"),
 *   "https://asdfghjkl.hyperbeam.com/foo?token=bar",
 *   {
 *     adminToken: "baz",
 *     delegateKeyboard: true,
 *   },
 * )
 * console.log(hb.userId)
 * // get tabs
 * const tabs = await hb.tabs.query({})
 * // update first tab
 * await hb.tabs.update(tabs[0].id, {url: "https://hyperbeam.dev/"})
 * ```
 *
 * @param container - container element to set up
 * @param url - Hyperbeam embed URL
 * @param opts - Additional options
 * @returns Promise that resolves to a Hyperbeam web client instance
 *
 * @category GG
 */
declare function Hyperbeam(container: HTMLIFrameElement | HTMLDivElement, url: string, opts?: {
    adminToken?: string;
    delegateKeyboard?: boolean;
    disableInput?: boolean;
    persistScreen?: boolean;
    playoutDelay?: boolean;
    timeout?: number;
    videoPaused?: boolean;
    volume?: number;
    webhookUserdata?: JSONValue;
    audioTrackCb?: (track: MediaStreamTrack) => void;
    frameCb?: (frame: ImageBitmap | HTMLVideoElement) => void;
    onCloseWarning?: (e: CloseWarningEvent) => void;
    onConnectionStateChange?: (e: ConnectionStateEvent) => void;
    onCursor?: (e: PeerMouseEvent) => void;
    onDisconnect?: (e: DisconnectEvent) => void;
    shotCb?: (obj: {
        tabId?: number;
        img: Blob;
    }) => void;
    videoTrackCb?: (track: MediaStreamTrack) => void;
}): Promise<HyperbeamEmbed>;
export default Hyperbeam;

export declare type HyperbeamEmbed = {
    readonly height: number;
    readonly maxArea: number;
    readonly rtt: number | undefined;
    readonly userId: string;
    readonly width: number;
    adminToken: string | undefined;
    delegateKeyboard: boolean;
    disableInput: boolean;
    playoutDelay: boolean;
    screenshot: Screenshot;
    tabs: Tabs;
    videoPaused: boolean;
    volume: number;
    addRoles(userIds: string[], roles: string[], exclusive: boolean | undefined): Promise<boolean>;
    destroy(): void;
    disablePrivacyMode(): Promise<boolean>;
    enablePrivacyMode(targetId: string | undefined): Promise<boolean>;
    ping(): void;
    reconnect(): void;
    removeRoles(userIds: string[], roles: string[], exclusive: boolean | undefined): Promise<boolean>;
    resize(width: number, height: number): Promise<boolean>;
    sendEvent(e: KeyEvent | MouseEvent_2 | WheelEvent_2): void;
    setPermissions(userId: string, data: PermissionData): Promise<boolean>;
};

/**
 * @deprecated use HyperbeamEmbed instead
 */
export declare type HyperbeamIFrame = HyperbeamEmbed;

export declare type HyperbeamRegionInfo = {
    region: string;
    country?: string;
};

declare type JSONValue = string | number | boolean | {
    [x: string]: JSONValue;
} | Array<JSONValue>;

export declare type KeyEvent = {
    type: "keydown" | "keyup";
    key: KeyboardEvent["key"];
    ctrlKey?: KeyboardEvent["ctrlKey"];
    metaKey?: KeyboardEvent["metaKey"];
};

declare type MouseEvent_2 = {
    type: "mousedown" | "mousemove" | "mouseup";
    x: number;
    y: number;
    button?: number;
};
export { MouseEvent_2 as MouseEvent }

/**
 * Error thrown when attempting to load while offline
 *
 * @category error
 */
export declare class OfflineError extends FailedToLoadError {
    constructor(message: string);
}

declare type PeerMouseEvent = {
    x: number;
    y: number;
    clientX: number;
    clientY: number;
    userId: string;
};

/**
 * Permissions data
 *
 * @category hb
 */
export declare type PermissionData = {
    priority: number;
    idle_timeout: number;
    control_disabled: boolean;
};

/**
 * Take screenshot of a tab
 *
 * @category hb method
 */
export declare type Screenshot = {
    (val: {
        tabId: number;
    }): Promise<void>;
};

/**
 * Error thrown when attempting to load a session that is already terminated
 *
 * @category error
 */
export declare class SessionTerminatedError extends FailedToLoadError {
    constructor(message: string);
}

/**
 * Chrome extension tabs API
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/
 *
 * @category hb.tabs
 */
export declare type Tabs = {
    create: Tabs_create;
    detectLanguage: Tabs_detectLanguage;
    discard: Tabs_discard;
    duplicate: Tabs_duplicate;
    get: Tabs_get;
    getZoom: Tabs_getZoom;
    getZoomSettings: Tabs_getZoomSettings;
    goBack: Tabs_goBack;
    goForward: Tabs_goForward;
    group: Tabs_group;
    highlight: Tabs_highlight;
    move: Tabs_move;
    query: Tabs_query;
    reload: Tabs_reload;
    remove: Tabs_remove;
    setZoom: Tabs_setZoom;
    setZoomSettings: Tabs_setZoomSettings;
    ungroup: Tabs_ungroup;
    update: Tabs_update;
    onActivated: Tabs_onActivated;
    onCreated: Tabs_onCreated;
    onHighlighted: Tabs_onHighlighted;
    onMoved: Tabs_onMoved;
    onRemoved: Tabs_onRemoved;
    onReplaced: Tabs_onReplaced;
    onUpdated: Tabs_onUpdated;
    onZoomChange: Tabs_onZoomChange;
};

/**
 * Create a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-create
 *
 * @category hb.tabs method
 */
export declare type Tabs_create = {
    (createProperties: chrome.tabs.CreateProperties): Promise<chrome.tabs.Tab>;
};

/**
 * DetectLanguage a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-detectLanguage
 *
 * @category hb.tabs method
 */
export declare type Tabs_detectLanguage = {
    (): Promise<string>;
    (tabId: number): Promise<string>;
};

/**
 * Discard a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-discard
 *
 * @category hb.tabs method
 */
export declare type Tabs_discard = {
    (tabId?: number | undefined): Promise<chrome.tabs.Tab>;
};

/**
 * Duplicate a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-duplicate
 *
 * @category hb.tabs method
 */
export declare type Tabs_duplicate = {
    (tabId: number): Promise<chrome.tabs.Tab>;
};

/**
 * Get a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-get
 *
 * @category hb.tabs method
 */
export declare type Tabs_get = {
    (tabId: number): Promise<chrome.tabs.Tab>;
};

/**
 * GetZoom a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-getZoom
 *
 * @category hb.tabs method
 */
export declare type Tabs_getZoom = {
    (): Promise<number>;
    (tabId: number): Promise<number>;
};

/**
 * GetZoomSettings a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-getZoomSettings
 *
 * @category hb.tabs method
 */
export declare type Tabs_getZoomSettings = {
    (): Promise<chrome.tabs.ZoomSettings>;
    (tabId: number): Promise<chrome.tabs.ZoomSettings>;
};

/**
 * GoBack a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-goBack
 *
 * @category hb.tabs method
 */
export declare type Tabs_goBack = {
    (): Promise<void>;
    (tabId: number): Promise<void>;
};

/**
 * GoForward a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-goForward
 *
 * @category hb.tabs method
 */
export declare type Tabs_goForward = {
    (): Promise<void>;
    (tabId: number): Promise<void>;
};

/**
 * Group a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-group
 *
 * @category hb.tabs method
 */
export declare type Tabs_group = {
    (options: chrome.tabs.GroupOptions): Promise<number>;
};

/**
 * Highlight a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-highlight
 *
 * @category hb.tabs method
 */
export declare type Tabs_highlight = {
    (highlightInfo: chrome.tabs.HighlightInfo): Promise<chrome.windows.Window>;
};

/**
 * Move a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-move
 *
 * @category hb.tabs method
 */
export declare type Tabs_move = {
    (tabId: number, moveProperties: chrome.tabs.MoveProperties): Promise<chrome.tabs.Tab>;
    (tabIds: number[], moveProperties: chrome.tabs.MoveProperties): Promise<chrome.tabs.Tab>;
};

/**
 * Listen to Chrome tab activated event
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#event-onActivated
 *
 * @category hb.tabs event
 */
export declare type Tabs_onActivated = {
    addListener: (callback: (activeInfo: chrome.tabs.TabActiveInfo) => void) => Promise<void>;
    removeListener: (callback: (activeInfo: chrome.tabs.TabActiveInfo) => void) => Promise<void>;
};

/**
 * Listen to Chrome tab created event
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#event-onCreated
 *
 * @category hb.tabs event
 */
export declare type Tabs_onCreated = {
    addListener: (callback: (tab: chrome.tabs.Tab) => void) => Promise<void>;
    removeListener: (callback: (tab: chrome.tabs.Tab) => void) => Promise<void>;
};

/**
 * Listen to Chrome tab highlighted event
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#event-onHighlighted
 *
 * @category hb.tabs event
 */
export declare type Tabs_onHighlighted = {
    addListener: (callback: (highlightInfo: chrome.tabs.TabHighlightInfo) => void) => Promise<void>;
    removeListener: (callback: (highlightInfo: chrome.tabs.TabHighlightInfo) => void) => Promise<void>;
};

/**
 * Listen to Chrome tab moved event
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#event-onMoved
 *
 * @category hb.tabs event
 */
export declare type Tabs_onMoved = {
    addListener: (callback: (tabId: number, moveInfo: chrome.tabs.TabMoveInfo) => void) => Promise<void>;
    removeListener: (callback: (tabId: number, moveInfo: chrome.tabs.TabMoveInfo) => void) => Promise<void>;
};

/**
 * Listen to Chrome tab removed event
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#event-onRemoved
 *
 * @category hb.tabs event
 */
export declare type Tabs_onRemoved = {
    addListener: (callback: (tabId: number, removeInfo: chrome.tabs.TabRemoveInfo) => void) => Promise<void>;
    removeListener: (callback: (tabId: number, removeInfo: chrome.tabs.TabRemoveInfo) => void) => Promise<void>;
};

/**
 * Listen to Chrome tab replaced event
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#event-onReplaced
 *
 * @category hb.tabs event
 */
export declare type Tabs_onReplaced = {
    addListener: (callback: (addedTabId: number, removedTabId: number) => void) => Promise<void>;
    removeListener: (callback: (addedTabId: number, removedTabId: number) => void) => Promise<void>;
};

/**
 * Listen to Chrome tab updated event
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#event-onUpdated
 *
 * @category hb.tabs event
 */
export declare type Tabs_onUpdated = {
    addListener: (callback: (tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) => void) => Promise<void>;
    removeListener: (callback: (tabId: number, changeInfo: chrome.tabs.TabChangeInfo, tab: chrome.tabs.Tab) => void) => Promise<void>;
};

/**
 * Listen to Chrome tab zoomChange event
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#event-onZoomChange
 *
 * @category hb.tabs event
 */
export declare type Tabs_onZoomChange = {
    addListener: (callback: (ZoomChangeInfo: chrome.tabs.ZoomChangeInfo) => void) => Promise<void>;
    removeListener: (callback: (ZoomChangeInfo: chrome.tabs.ZoomChangeInfo) => void) => Promise<void>;
};

/**
 * Query a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-query
 *
 * ```ts
 * const tabs = await hb.tabs.query({})
 * ```
 * @category hb.tabs method
 */
export declare type Tabs_query = {
    (queryInfo: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]>;
};

/**
 * Reload a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-reload
 *
 * @category hb.tabs method
 */
export declare type Tabs_reload = {
    (tabId: number, reloadProperties?: chrome.tabs.ReloadProperties | undefined): Promise<void>;
    (reloadProperties: chrome.tabs.ReloadProperties): Promise<void>;
    (): Promise<void>;
};

/**
 * Remove a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-remove
 *
 * @category hb.tabs method
 */
export declare type Tabs_remove = {
    (tabId: number): Promise<void>;
    (tabIds: number[]): Promise<void>;
};

/**
 * SetZoom a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-setZoom
 *
 * @category hb.tabs method
 */
export declare type Tabs_setZoom = {
    (zoomFactor: number): Promise<void>;
    (tabId: number, zoomFactor: number): Promise<void>;
};

/**
 * SetZoomSettings a Chrome tab
 *
 * See also https://developer.chrome.come/docs/extensions/reference/tabs/#method-setZoomSettings
 *
 * @category hb.tabs method
 */
export declare type Tabs_setZoomSettings = {
    (zoomSettings: chrome.tabs.ZoomSettings): Promise<void>;
    (tabId: number, zoomSettings: chrome.tabs.ZoomSettings): Promise<void>;
};

/**
 * Ungroup Chrome tabs
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#method-ungroup
 *
 * @category hb.tabs method
 */
export declare type Tabs_ungroup = {
    (tabIds: number | number[]): Promise<void>;
};

/**
 * Update a Chrome tab
 *
 * See also https://developer.chrome.com/docs/extensions/reference/tabs/#method-update
 *
 * @category hb.tabs method
 */
export declare type Tabs_update = {
    /**
     * ```ts
     * const updatedTab = await hb.tabs.update({url: "https://hyperbeam.dev/"})
     * ```
     */
    (updateProperties: chrome.tabs.UpdateProperties): Promise<chrome.tabs.Tab>;
    /**
     * ```ts
     * const updatedTab = await hb.tabs.update(2, {url: "https://hyperbeam.dev/"})
     * ```
     */
    (tabId: number, updateProperties: chrome.tabs.UpdateProperties): Promise<chrome.tabs.Tab>;
};

/**
 * Error thrown when request to load the Hyperbeam session times out
 *
 * @category error
 */
export declare class TimedOutError extends Error {
    constructor();
}

declare type WheelEvent_2 = {
    type: "wheel";
    deltaY: number;
};
export { WheelEvent_2 as WheelEvent }

export { }
